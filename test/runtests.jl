using DataStreamsIntegrationTests

using DataStreams, DataFrames, CSV, SQLite, Feather, ODBC

# testing files
dir = dirname(@__FILE__)
# dir = joinpath(Pkg.dir("DataStreamsIntegrationTests"), "test")

# DataFrames
dfsource = Tester("DataFrame", x->x, DataFrame, (), scalartransforms, vectortransforms, x->x, ()->nothing)
dfsink = Tester("DataFrame", x->x, DataFrame, (), scalartransforms, vectortransforms, x->x, ()->nothing)
DataFrames.DataFrame() = CSV.read(FILE)

# CSV
FILE = joinpath(dir, "randoms.csv")
FILE2 = joinpath(dir, "randoms2.csv")
csvsource = Tester("CSV.Source", CSV.read, CSV.Source, (FILE,), scalartransforms, vectortransforms, x->x, ()->nothing)
csvsink = Tester("CSV.Sink", CSV.write, CSV.Sink, (FILE2,), scalartransforms, vectortransforms, x->CSV.read(FILE2), x->rm(FILE2))

# SQLite
dbfile = joinpath(dir, "randoms.sqlite")
dbfile2 = joinpath(dir, "randoms2.sqlite")
cp(dbfile, dbfile2; remove_destination=true)
db = SQLite.DB(dbfile2)
SQLite.createtable!(db, "randoms2", Data.schema(SQLite.Source(db, "select * from randoms")))
sqlitesource = Tester("SQLite.Source", SQLite.query, SQLite.Source, (db, "select * from randoms"), scalartransforms, vectortransforms, x->x, ()->nothing)
sqlitesink = Tester("SQLite.Sink", SQLite.load, SQLite.Sink, (db, "randoms2"), scalartransforms, vectortransforms, x->SQLite.query(db, "select * from randoms2"), x->rm(dbfile2))

# Feather
FFILE = joinpath(dir, "randoms.feather")
FFILE2 = joinpath(dir, "randoms2.feather")
feathersource = Tester("Feather.Source", Feather.read, Feather.Source, (FFILE,), scalartransforms, vectortransforms, x->x, ()->nothing)
feathersink = Tester("Feather.Sink", Feather.write, Feather.Sink, (FFILE2,), scalartransforms, vectortransforms, x->Feather.read(FFILE2), x->rm(FFILE2))

# ODBC
if length(readlines(`docker ps -f name=test-mysql`)) < 2
    run(`docker run --detach --name=test-mysql --env="MYSQL_ROOT_PASSWORD=mypassword" --publish 3306:3306 mysql:latest`)
    sleep(30)
end
driver = haskey(ENV, "TRAVIS") ? "MySQL" : "MySQL ODBC Driver"
dsn = ODBC.DSN("Driver={$driver};SERVER=127.0.0.1;Port=3306;Database=mysql;USER=root;PASSWORD=mypassword;Option=3")
ODBC.execute!(dsn, "drop database if exists testdb;")
ODBC.execute!(dsn, "create database testdb;")
ODBC.execute!(dsn, "use testdb;")
ODBC.execute!(dsn, "drop table if exists randoms;")
ODBC.execute!(dsn, "CREATE TABLE randoms ( id bigint NOT NULL PRIMARY KEY, firstname VARCHAR(25), lastname VARCHAR(25), salary real DEFAULT NULL, hourlyrate real DEFAULT NULL, hiredate DATE, lastclockin DATETIME);")
ODBC.execute!(dsn, "load data local infile '$(FILE).odbc' into table randoms fields terminated by ',' lines terminated by '\n' ignore 1 rows (id,firstname,lastname,salary,hourlyrate,hiredate,lastclockin);")
ODBC.execute!(dsn, "CREATE TABLE randoms2 ( id bigint NOT NULL, firstname VARCHAR(25), lastname VARCHAR(25), salary real DEFAULT NULL, hourlyrate real DEFAULT NULL, hiredate DATE, lastclockin DATETIME);")
odbcsource = Tester("ODBC.Source", ODBC.query, ODBC.Source, (dsn, "select * from randoms"), scalartransforms, vectortransforms, x->x, ()->nothing)
odbcsink = Tester("ODBC.Sink", ODBC.load, ODBC.Sink, (dsn, "randoms2"), scalartransforms, vectortransforms, x->ODBC.query(dsn, "select * from randoms2"), x->ODBC.execute!(dsn, "drop table randoms2"))

sources = (dfsource, csvsource, sqlitesource, feathersource, odbcsource)
sinks = (dfsink, #=csvsink, sqlitesink, feathersink,=# odbcsink)

for source in sources
    for sink in sinks
        try
        if source.constructor != DataFrame
        println("[$(now())]: Test high-level from source to sink; e.g. CSV.read")
        println("[$(now())]: Source: $(source.name) args => Sink: $(sink.name) args")
        si = source.highlevel(source.args..., sink.constructor, sink.args...)
        DataStreamsIntegrationTests.check(sink.sinktodf(si))
        println("[$(now())]: Source: $(source.name) args => Sink: $(sink.name) args + append")
        si = source.highlevel(source.args..., sink.constructor, sink.args...; append=true)
        DataStreamsIntegrationTests.check(sink.sinktodf(si), true)
        println("[$(now())]: Source: $(source.name) args => Sink: $(sink.name) args + transforms")
        si = source.highlevel(source.args..., sink.constructor, sink.args...; transforms=DataStreamsIntegrationTests.gettransforms(source, sink))
        DataStreamsIntegrationTests.check(sink.sinktodf(si), false, true)
        println("[$(now())]: Source: $(source.name) args => Sink: $(sink.name) args + append + transforms")
        si = source.highlevel(source.args..., sink.constructor, sink.args...; append=true, transforms=DataStreamsIntegrationTests.gettransforms(source, sink))
        DataStreamsIntegrationTests.check(sink.sinktodf(si), true, true)
        println("[$(now())]: Source: $(source.name) args => Sink: $(sink.name)")
        sinst = sink.constructor(sink.args...)
        si = source.highlevel(source.args..., sinst)
        DataStreamsIntegrationTests.check(sink.sinktodf(si))
        println("[$(now())]: Source: $(source.name) args => Sink: $(sink.name) + append")
        sinst = sink.constructor(sink.args...; append=true)
        si = source.highlevel(source.args..., sinst; append=true)
        DataStreamsIntegrationTests.check(sink.sinktodf(si), true)
        println("[$(now())]: Source: $(source.name) args => Sink: $(sink.name) + transforms")
        sinst = sink.constructor(sink.args...)
        si = source.highlevel(source.args..., sinst; transforms=DataStreamsIntegrationTests.gettransforms(source, sink))
        DataStreamsIntegrationTests.check(sink.sinktodf(si), false, true)
        println("[$(now())]: Source: $(source.name) args => Sink: $(sink.name) + append + transforms`")
        sinst = sink.constructor(sink.args...; append=true)
        si = source.highlevel(source.args..., sinst; append=true, transforms=DataStreamsIntegrationTests.gettransforms(source, sink))
        DataStreamsIntegrationTests.check(sink.sinktodf(si), true, true)
        println("[$(now())]: Source: $(source.name) => Sink: $(sink.name) args")
        soinst = source.constructor(source.args...)
        si = source.highlevel(soinst, sink.constructor, sink.args...)
        DataStreamsIntegrationTests.check(sink.sinktodf(si))
        println("[$(now())]: Source: $(source.name) => Sink: $(sink.name) args + append")
        soinst = source.constructor(source.args...)
        si = source.highlevel(soinst, sink.constructor, sink.args...; append=true)
        DataStreamsIntegrationTests.check(sink.sinktodf(si), true)
        println("[$(now())]: Source: $(source.name) => Sink: $(sink.name) args + transforms")
        soinst = source.constructor(source.args...)
        si = source.highlevel(soinst, sink.constructor, sink.args...; transforms=DataStreamsIntegrationTests.gettransforms(source, sink))
        DataStreamsIntegrationTests.check(sink.sinktodf(si), false, true)
        println("[$(now())]: Source: $(source.name) => Sink: $(sink.name) args + append + transforms")
        soinst = source.constructor(source.args...)
        si = source.highlevel(soinst, sink.constructor, sink.args...; append=true, transforms=DataStreamsIntegrationTests.gettransforms(source, sink))
        DataStreamsIntegrationTests.check(sink.sinktodf(si), true, true)
        println("[$(now())]: Source: $(source.name) => Sink: $(sink.name)")
        soinst = source.constructor(source.args...)
        sinst = sink.constructor(sink.args...)
        si = source.highlevel(soinst, sinst)
        DataStreamsIntegrationTests.check(sink.sinktodf(si))
        println("[$(now())]: Source: $(source.name) => Sink: $(sink.name) + append")
        soinst = source.constructor(source.args...)
        sinst = sink.constructor(sink.args...; append=true)
        si = source.highlevel(soinst, sinst; append=true)
        DataStreamsIntegrationTests.check(sink.sinktodf(si), true)
        println("[$(now())]: Source: $(source.name) => Sink: $(sink.name) + transforms")
        soinst = source.constructor(source.args...)
        sinst = sink.constructor(sink.args...)
        si = source.highlevel(soinst, sinst; transforms=DataStreamsIntegrationTests.gettransforms(source, sink))
        DataStreamsIntegrationTests.check(sink.sinktodf(si), false, true)
        println("[$(now())]: Source: $(source.name) => Sink: $(sink.name) + append + transforms")
        soinst = source.constructor(source.args...)
        sinst = sink.constructor(sink.args...; append=true)
        si = source.highlevel(soinst, sinst; append=true, transforms=DataStreamsIntegrationTests.gettransforms(source, sink))
        DataStreamsIntegrationTests.check(sink.sinktodf(si), true, true)
        end

        if sink.constructor != DataFrame
        println("[$(now())]: Test high-level to sink from source; e.g. CSV.write")
        println("[$(now())]: Sink: $(sink.name) args => Source: $(source.name) args")
        si = sink.highlevel(sink.args..., source.constructor, source.args...)
        DataStreamsIntegrationTests.check(sink.sinktodf(si))
        println("[$(now())]: Sink: $(sink.name) args => Source: $(source.name) args + append")
        si = sink.highlevel(sink.args..., source.constructor, source.args...; append=true)
        DataStreamsIntegrationTests.check(sink.sinktodf(si), true)
        println("[$(now())]: Sink: $(sink.name) args => Source: $(source.name) args + transforms")
        si = sink.highlevel(sink.args..., source.constructor, source.args...; transforms=DataStreamsIntegrationTests.gettransforms(source, sink))
        DataStreamsIntegrationTests.check(sink.sinktodf(si), false, true)
        println("[$(now())]: Sink: $(sink.name) args => Source: $(source.name) args + append + transforms")
        si = sink.highlevel(sink.args..., source.constructor, source.args...; append=true, transforms=DataStreamsIntegrationTests.gettransforms(source, sink))
        DataStreamsIntegrationTests.check(sink.sinktodf(si), true, true)
        println("[$(now())]: Sink: $(sink.name) => Source: $(source.name) args")
        sinst = sink.constructor(sink.args...)
        si = sink.highlevel(sinst, source.constructor, source.args...)
        DataStreamsIntegrationTests.check(sink.sinktodf(si))
        println("[$(now())]: Sink: $(sink.name) => Source: $(source.name) args + append")
        sinst = sink.constructor(sink.args...; append=true)
        si = sink.highlevel(sinst, source.constructor, source.args...; append=true)
        DataStreamsIntegrationTests.check(sink.sinktodf(si), true)
        println("[$(now())]: Sink: $(sink.name) => Source: $(source.name) args + transforms")
        sinst = sink.constructor(sink.args...)
        si = sink.highlevel(sinst, source.constructor, source.args...; transforms=DataStreamsIntegrationTests.gettransforms(source, sink))
        DataStreamsIntegrationTests.check(sink.sinktodf(si), false, true)
        println("[$(now())]: Sink: $(sink.name) => Source: $(source.name) args + append + transforms`")
        sinst = sink.constructor(sink.args...; append=true)
        si = sink.highlevel(sinst, source.constructor, source.args...; append=true, transforms=DataStreamsIntegrationTests.gettransforms(source, sink))
        DataStreamsIntegrationTests.check(sink.sinktodf(si), true, true)
        println("[$(now())]: Sink: $(sink.name) args => Source: $(source.name)")
        soinst = source.constructor(source.args...)
        si = sink.highlevel(sink.args..., soinst)
        DataStreamsIntegrationTests.check(sink.sinktodf(si))
        println("[$(now())]: Sink: $(sink.name) args => Source: $(source.name) + append")
        soinst = source.constructor(source.args...)
        si = sink.highlevel(sink.args..., soinst; append=true)
        DataStreamsIntegrationTests.check(sink.sinktodf(si), true)
        println("[$(now())]: Sink: $(sink.name) args => Source: $(source.name) + transforms")
        soinst = source.constructor(source.args...)
        si = sink.highlevel(sink.args..., soinst; transforms=DataStreamsIntegrationTests.gettransforms(source, sink))
        DataStreamsIntegrationTests.check(sink.sinktodf(si), false, true)
        println("[$(now())]: Sink: $(sink.name) args => Source: $(source.name) + append + transforms")
        soinst = source.constructor(source.args...)
        si = sink.highlevel(sink.args..., soinst; append=true, transforms=DataStreamsIntegrationTests.gettransforms(source, sink))
        DataStreamsIntegrationTests.check(sink.sinktodf(si), true, true)
        println("[$(now())]: Sink: $(sink.name) => Source: $(source.name)")
        sinst = sink.constructor(sink.args...)
        soinst = source.constructor(source.args...)
        si = sink.highlevel(sinst, soinst)
        DataStreamsIntegrationTests.check(sink.sinktodf(si))
        println("[$(now())]: Sink: $(sink.name) => Source: $(source.name) + append")
        sinst = sink.constructor(sink.args...; append=true)
        soinst = source.constructor(source.args...)
        si = sink.highlevel(sinst, soinst; append=true)
        DataStreamsIntegrationTests.check(sink.sinktodf(si), true)
        println("[$(now())]: Sink: $(sink.name) => Source: $(source.name) + transforms")
        sinst = sink.constructor(sink.args...)
        soinst = source.constructor(source.args...)
        si = sink.highlevel(sinst, soinst; transforms=DataStreamsIntegrationTests.gettransforms(source, sink))
        DataStreamsIntegrationTests.check(sink.sinktodf(si), false, true)
        println("[$(now())]: Sink: $(sink.name) => Source: $(source.name) + append + transforms")
        sinst = sink.constructor(sink.args...; append=true)
        soinst = source.constructor(source.args...)
        si = sink.highlevel(sinst, soinst; append=true, transforms=DataStreamsIntegrationTests.gettransforms(source, sink))
        DataStreamsIntegrationTests.check(sink.sinktodf(si), true, true)
        println("done")
        end
        catch e
            rethrow(e)
        finally
        println("[$(now())]: cleanup")
        sink.cleanup(sink.args...)
        end
    end
end
